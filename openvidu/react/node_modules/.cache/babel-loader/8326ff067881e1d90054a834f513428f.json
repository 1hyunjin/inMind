{"ast":null,"code":"var _jsxFileName = \"/opt/openvidu/openvidu-tutorials/openvidu-react/src/App.js\";\nimport { OpenVidu } from 'openvidu-browser';\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport UserVideoComponent from './UserVideoComponent';\n\n// const APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'https://demos.openvidu.io/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'https://b301.xyz/';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // These properties are in the state's component in order to re-render the HTML whenever their values change\n    this.state = {\n      mySessionId: 'SessionA',\n      myUserName: 'Participant' + Math.floor(Math.random() * 100),\n      session: undefined,\n      mainStreamManager: undefined,\n      // Main video of the page. Will be the 'publisher' or one of the 'subscribers'\n      publisher: undefined,\n      subscribers: []\n    };\n    this.joinSession = this.joinSession.bind(this);\n    this.leaveSession = this.leaveSession.bind(this);\n    this.switchCamera = this.switchCamera.bind(this);\n    this.handleChangeSessionId = this.handleChangeSessionId.bind(this);\n    this.handleChangeUserName = this.handleChangeUserName.bind(this);\n    this.handleMainVideoStream = this.handleMainVideoStream.bind(this);\n    this.onbeforeunload = this.onbeforeunload.bind(this);\n  }\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n  }\n  onbeforeunload(event) {\n    this.leaveSession();\n  }\n  handleChangeSessionId(e) {\n    this.setState({\n      mySessionId: e.target.value\n    });\n  }\n  handleChangeUserName(e) {\n    this.setState({\n      myUserName: e.target.value\n    });\n  }\n  handleMainVideoStream(stream) {\n    if (this.state.mainStreamManager !== stream) {\n      this.setState({\n        mainStreamManager: stream\n      });\n    }\n  }\n  deleteSubscriber(streamManager) {\n    let subscribers = this.state.subscribers;\n    let index = subscribers.indexOf(streamManager, 0);\n    if (index > -1) {\n      subscribers.splice(index, 1);\n      this.setState({\n        subscribers: subscribers\n      });\n    }\n  }\n  joinSession() {\n    // --- 1) Get an OpenVidu object ---\n\n    this.OV = new OpenVidu();\n\n    // --- 2) Init a session ---\n\n    this.setState({\n      session: this.OV.initSession()\n    }, () => {\n      var mySession = this.state.session;\n\n      // --- 3) Specify the actions when events take place in the session ---\n\n      // On every new Stream received...\n      mySession.on('streamCreated', event => {\n        // Subscribe to the Stream to receive it. Second parameter is undefined\n        // so OpenVidu doesn't create an HTML video by its own\n        var subscriber = mySession.subscribe(event.stream, undefined);\n        var subscribers = this.state.subscribers;\n        subscribers.push(subscriber);\n\n        // Update the state with the new subscribers\n        this.setState({\n          subscribers: subscribers\n        });\n      });\n\n      // On every Stream destroyed...\n      mySession.on('streamDestroyed', event => {\n        // Remove the stream from 'subscribers' array\n        this.deleteSubscriber(event.stream.streamManager);\n      });\n\n      // On every asynchronous exception...\n      mySession.on('exception', exception => {\n        console.warn(exception);\n      });\n\n      // --- 4) Connect to the session with a valid user token ---\n\n      // Get a token from the OpenVidu deployment\n      this.getToken().then(token => {\n        // First param is the token got from the OpenVidu deployment. Second param can be retrieved by every user on event\n        // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n        mySession.connect(token, {\n          clientData: this.state.myUserName\n        }).then(async () => {\n          // --- 5) Get your own camera stream ---\n\n          // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n          // element: we will manage it on our own) and with the desired properties\n          let publisher = await this.OV.initPublisherAsync(undefined, {\n            audioSource: undefined,\n            // The source of audio. If undefined default microphone\n            videoSource: undefined,\n            // The source of video. If undefined default webcam\n            publishAudio: true,\n            // Whether you want to start publishing with your audio unmuted or not\n            publishVideo: true,\n            // Whether you want to start publishing with your video enabled or not\n            resolution: '640x480',\n            // The resolution of your video\n            frameRate: 30,\n            // The frame rate of your video\n            insertMode: 'APPEND',\n            // How the video is inserted in the target element 'video-container'\n            mirror: false // Whether to mirror your local video or not\n          });\n\n          // --- 6) Publish your stream ---\n\n          mySession.publish(publisher);\n\n          // Obtain the current video device in use\n          var devices = await this.OV.getDevices();\n          var videoDevices = devices.filter(device => device.kind === 'videoinput');\n          var currentVideoDeviceId = publisher.stream.getMediaStream().getVideoTracks()[0].getSettings().deviceId;\n          var currentVideoDevice = videoDevices.find(device => device.deviceId === currentVideoDeviceId);\n\n          // Set the main video in the page to display our webcam and store our Publisher\n          this.setState({\n            currentVideoDevice: currentVideoDevice,\n            mainStreamManager: publisher,\n            publisher: publisher\n          });\n        }).catch(error => {\n          console.log('There was an error connecting to the session:', error.code, error.message);\n        });\n      });\n    });\n  }\n  leaveSession() {\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n    const mySession = this.state.session;\n    console.log(mySession);\n    if (mySession) {\n      mySession.disconnect();\n    }\n\n    // Empty all properties...\n    this.OV = null;\n    this.setState({\n      session: undefined,\n      subscribers: [],\n      mySessionId: 'SessionA',\n      myUserName: 'Participant' + Math.floor(Math.random() * 100),\n      mainStreamManager: undefined,\n      publisher: undefined\n    });\n  }\n  async switchCamera() {\n    try {\n      const devices = await this.OV.getDevices();\n      var videoDevices = devices.filter(device => device.kind === 'videoinput');\n      if (videoDevices && videoDevices.length > 1) {\n        var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId);\n        if (newVideoDevice.length > 0) {\n          // Creating a new publisher with specific videoSource\n          // In mobile devices the default and first camera is the front one\n          var newPublisher = this.OV.initPublisher(undefined, {\n            videoSource: newVideoDevice[0].deviceId,\n            publishAudio: true,\n            publishVideo: true,\n            mirror: true\n          });\n\n          //newPublisher.once(\"accessAllowed\", () => {\n          await this.state.session.unpublish(this.state.mainStreamManager);\n          await this.state.session.publish(newPublisher);\n          this.setState({\n            currentVideoDevice: newVideoDevice[0],\n            mainStreamManager: newPublisher,\n            publisher: newPublisher\n          });\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const mySessionId = this.state.mySessionId;\n    const myUserName = this.state.myUserName;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.state.session === undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"join\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"img-div\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"resources/images/openvidu_grey_bg_transp_cropped.png\",\n            alt: \"OpenVidu logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"join-dialog\",\n          className: \"jumbotron vertical-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Join a video session \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-group\",\n            onSubmit: this.joinSession,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Participant: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                type: \"text\",\n                id: \"userName\",\n                value: myUserName,\n                onChange: this.handleChangeUserName,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \" Session: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                type: \"text\",\n                id: \"sessionId\",\n                value: mySessionId,\n                onChange: this.handleChangeSessionId,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"btn btn-lg btn-success\",\n                name: \"commit\",\n                type: \"submit\",\n                value: \"JOIN\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }, this) : null, this.state.session !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"session\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"session-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            id: \"session-title\",\n            children: mySessionId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"btn btn-large btn-danger\",\n            type: \"button\",\n            id: \"buttonLeaveSession\",\n            onClick: this.leaveSession,\n            value: \"Leave session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"btn btn-large btn-success\",\n            type: \"button\",\n            id: \"buttonSwitchCamera\",\n            onClick: this.switchCamera,\n            value: \"Switch Camera\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this), this.state.mainStreamManager !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"main-video\",\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(UserVideoComponent, {\n            streamManager: this.state.mainStreamManager\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"video-container\",\n          className: \"col-md-6\",\n          children: [this.state.publisher !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-container col-md-6 col-xs-6\",\n            onClick: () => this.handleMainVideoStream(this.state.publisher),\n            children: /*#__PURE__*/_jsxDEV(UserVideoComponent, {\n              streamManager: this.state.publisher\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 33\n          }, this) : null, this.state.subscribers.map((sub, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-container col-md-6 col-xs-6\",\n            onClick: () => this.handleMainVideoStream(sub),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: sub.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(UserVideoComponent, {\n              streamManager: sub\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 37\n            }, this)]\n          }, sub.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this);\n  }\n\n  /**\n   * --------------------------------------------\n   * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n   * --------------------------------------------\n   * The methods below request the creation of a Session and a Token to\n   * your application server. This keeps your OpenVidu deployment secure.\n   *\n   * In this sample code, there is no user control at all. Anybody could\n   * access your application server endpoints! In a real production\n   * environment, your application server must identify the user to allow\n   * access to the endpoints.\n   *\n   * Visit https://docs.openvidu.io/en/stable/application-server to learn\n   * more about the integration of OpenVidu in your application server.\n   */\n  async getToken() {\n    const sessionId = await this.createSession(this.state.mySessionId);\n    return await this.createToken(sessionId);\n  }\n  async createSession(sessionId) {\n    const isSession = await axios.get(APPLICATION_SERVER_URL + 'openvidu/api/sessions', {\n      customSessionId: sessionId\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk='\n      }\n    });\n    console.log(\"isSession >> \");\n    console.log(isSession);\n    const response = await axios.post(APPLICATION_SERVER_URL + 'openvidu/api/sessions', {\n      customSessionId: sessionId\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk='\n      }\n    });\n    console.log(sessionId);\n    console.log(response.data);\n    return response.data; // The sessionId\n  }\n  async createToken(sessionId) {\n    console.log(sessionId);\n    const response = await axios.post(APPLICATION_SERVER_URL + 'openvidu/api/sessions/' + sessionId.sessionId + '/connection', {}, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk='\n      }\n    });\n    console.log(response.data);\n    return response.data.token; // The token\n  }\n}\nexport default App;","map":{"version":3,"names":["OpenVidu","axios","React","Component","UserVideoComponent","jsxDEV","_jsxDEV","APPLICATION_SERVER_URL","process","env","NODE_ENV","App","constructor","props","state","mySessionId","myUserName","Math","floor","random","session","undefined","mainStreamManager","publisher","subscribers","joinSession","bind","leaveSession","switchCamera","handleChangeSessionId","handleChangeUserName","handleMainVideoStream","onbeforeunload","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","event","e","setState","target","value","stream","deleteSubscriber","streamManager","index","indexOf","splice","OV","initSession","mySession","on","subscriber","subscribe","push","exception","console","warn","getToken","then","token","connect","clientData","initPublisherAsync","audioSource","videoSource","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","publish","devices","getDevices","videoDevices","filter","device","kind","currentVideoDeviceId","getMediaStream","getVideoTracks","getSettings","deviceId","currentVideoDevice","find","catch","error","log","code","message","disconnect","length","newVideoDevice","newPublisher","initPublisher","unpublish","render","className","children","id","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","name","onClick","map","sub","i","sessionId","createSession","createToken","isSession","get","customSessionId","headers","response","post","data"],"sources":["/opt/openvidu/openvidu-tutorials/openvidu-react/src/App.js"],"sourcesContent":["import { OpenVidu } from 'openvidu-browser';\n\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport UserVideoComponent from './UserVideoComponent';\n\n// const APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'https://demos.openvidu.io/';\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'https://b301.xyz/';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // These properties are in the state's component in order to re-render the HTML whenever their values change\n        this.state = {\n            mySessionId: 'SessionA',\n            myUserName: 'Participant' + Math.floor(Math.random() * 100),\n            session: undefined,\n            mainStreamManager: undefined,  // Main video of the page. Will be the 'publisher' or one of the 'subscribers'\n            publisher: undefined,\n            subscribers: [],\n        };\n\n        this.joinSession = this.joinSession.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.switchCamera = this.switchCamera.bind(this);\n        this.handleChangeSessionId = this.handleChangeSessionId.bind(this);\n        this.handleChangeUserName = this.handleChangeUserName.bind(this);\n        this.handleMainVideoStream = this.handleMainVideoStream.bind(this);\n        this.onbeforeunload = this.onbeforeunload.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n    }\n\n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n\n    handleChangeSessionId(e) {\n        this.setState({\n            mySessionId: e.target.value,\n        });\n    }\n\n    handleChangeUserName(e) {\n        this.setState({\n            myUserName: e.target.value,\n        });\n    }\n\n    handleMainVideoStream(stream) {\n        if (this.state.mainStreamManager !== stream) {\n            this.setState({\n                mainStreamManager: stream\n            });\n        }\n    }\n\n    deleteSubscriber(streamManager) {\n        let subscribers = this.state.subscribers;\n        let index = subscribers.indexOf(streamManager, 0);\n        if (index > -1) {\n            subscribers.splice(index, 1);\n            this.setState({\n                subscribers: subscribers,\n            });\n        }\n    }\n\n    joinSession() {\n        // --- 1) Get an OpenVidu object ---\n\n        this.OV = new OpenVidu();\n\n        // --- 2) Init a session ---\n\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            () => {\n                var mySession = this.state.session;\n\n                // --- 3) Specify the actions when events take place in the session ---\n\n                // On every new Stream received...\n                mySession.on('streamCreated', (event) => {\n                    // Subscribe to the Stream to receive it. Second parameter is undefined\n                    // so OpenVidu doesn't create an HTML video by its own\n                    var subscriber = mySession.subscribe(event.stream, undefined);\n                    var subscribers = this.state.subscribers;\n                    subscribers.push(subscriber);\n\n                    // Update the state with the new subscribers\n                    this.setState({\n                        subscribers: subscribers,\n                    });\n                });\n\n                // On every Stream destroyed...\n                mySession.on('streamDestroyed', (event) => {\n\n                    // Remove the stream from 'subscribers' array\n                    this.deleteSubscriber(event.stream.streamManager);\n                });\n\n                // On every asynchronous exception...\n                mySession.on('exception', (exception) => {\n                    console.warn(exception);\n                });\n\n                // --- 4) Connect to the session with a valid user token ---\n\n                // Get a token from the OpenVidu deployment\n                this.getToken().then((token) => {\n                    // First param is the token got from the OpenVidu deployment. Second param can be retrieved by every user on event\n                    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n                    mySession.connect(token, { clientData: this.state.myUserName })\n                        .then(async () => {\n\n                            // --- 5) Get your own camera stream ---\n\n                            // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n                            // element: we will manage it on our own) and with the desired properties\n                            let publisher = await this.OV.initPublisherAsync(undefined, {\n                                audioSource: undefined, // The source of audio. If undefined default microphone\n                                videoSource: undefined, // The source of video. If undefined default webcam\n                                publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\n                                publishVideo: true, // Whether you want to start publishing with your video enabled or not\n                                resolution: '640x480', // The resolution of your video\n                                frameRate: 30, // The frame rate of your video\n                                insertMode: 'APPEND', // How the video is inserted in the target element 'video-container'\n                                mirror: false, // Whether to mirror your local video or not\n                            });\n\n                            // --- 6) Publish your stream ---\n\n                            mySession.publish(publisher);\n\n                            // Obtain the current video device in use\n                            var devices = await this.OV.getDevices();\n                            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n                            var currentVideoDeviceId = publisher.stream.getMediaStream().getVideoTracks()[0].getSettings().deviceId;\n                            var currentVideoDevice = videoDevices.find(device => device.deviceId === currentVideoDeviceId);\n\n                            // Set the main video in the page to display our webcam and store our Publisher\n                            this.setState({\n                                currentVideoDevice: currentVideoDevice,\n                                mainStreamManager: publisher,\n                                publisher: publisher,\n                            });\n                        })\n                        .catch((error) => {\n                            console.log('There was an error connecting to the session:', error.code, error.message);\n                        });\n                });\n            },\n        );\n    }\n\n    leaveSession() {\n\n        // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n        const mySession = this.state.session;\n        console.log(mySession);\n\n        if (mySession) {\n            mySession.disconnect();\n        }\n\n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'Participant' + Math.floor(Math.random() * 100),\n            mainStreamManager: undefined,\n            publisher: undefined\n        });\n    }\n\n    async switchCamera() {\n        try {\n            const devices = await this.OV.getDevices()\n            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n\n            if (videoDevices && videoDevices.length > 1) {\n\n                var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId)\n\n                if (newVideoDevice.length > 0) {\n                    // Creating a new publisher with specific videoSource\n                    // In mobile devices the default and first camera is the front one\n                    var newPublisher = this.OV.initPublisher(undefined, {\n                        videoSource: newVideoDevice[0].deviceId,\n                        publishAudio: true,\n                        publishVideo: true,\n                        mirror: true\n                    });\n\n                    //newPublisher.once(\"accessAllowed\", () => {\n                    await this.state.session.unpublish(this.state.mainStreamManager)\n\n                    await this.state.session.publish(newPublisher)\n                    this.setState({\n                        currentVideoDevice: newVideoDevice[0],\n                        mainStreamManager: newPublisher,\n                        publisher: newPublisher,\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    render() {\n        const mySessionId = this.state.mySessionId;\n        const myUserName = this.state.myUserName;\n\n        return (\n            <div className=\"container\">\n                {this.state.session === undefined ? (\n                    <div id=\"join\">\n                        <div id=\"img-div\">\n                            <img src=\"resources/images/openvidu_grey_bg_transp_cropped.png\" alt=\"OpenVidu logo\" />\n                        </div>\n                        <div id=\"join-dialog\" className=\"jumbotron vertical-center\">\n                            <h1> Join a video session </h1>\n                            <form className=\"form-group\" onSubmit={this.joinSession}>\n                                <p>\n                                    <label>Participant: </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        id=\"userName\"\n                                        value={myUserName}\n                                        onChange={this.handleChangeUserName}\n                                        required\n                                    />\n                                </p>\n                                <p>\n                                    <label> Session: </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        id=\"sessionId\"\n                                        value={mySessionId}\n                                        onChange={this.handleChangeSessionId}\n                                        required\n                                    />\n                                </p>\n                                <p className=\"text-center\">\n                                    <input className=\"btn btn-lg btn-success\" name=\"commit\" type=\"submit\" value=\"JOIN\" />\n                                </p>\n                            </form>\n                        </div>\n                    </div>\n                ) : null}\n\n                {this.state.session !== undefined ? (\n                    <div id=\"session\">\n                        <div id=\"session-header\">\n                            <h1 id=\"session-title\">{mySessionId}</h1>\n                            <input\n                                className=\"btn btn-large btn-danger\"\n                                type=\"button\"\n                                id=\"buttonLeaveSession\"\n                                onClick={this.leaveSession}\n                                value=\"Leave session\"\n                            />\n                            <input\n                                className=\"btn btn-large btn-success\"\n                                type=\"button\"\n                                id=\"buttonSwitchCamera\"\n                                onClick={this.switchCamera}\n                                value=\"Switch Camera\"\n                            />\n                        </div>\n\n                        {this.state.mainStreamManager !== undefined ? (\n                            <div id=\"main-video\" className=\"col-md-6\">\n                                <UserVideoComponent streamManager={this.state.mainStreamManager} />\n\n                            </div>\n                        ) : null}\n                        <div id=\"video-container\" className=\"col-md-6\">\n                            {this.state.publisher !== undefined ? (\n                                <div className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(this.state.publisher)}>\n                                    <UserVideoComponent\n                                        streamManager={this.state.publisher} />\n                                </div>\n                            ) : null}\n                            {this.state.subscribers.map((sub, i) => (\n                                <div key={sub.id} className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(sub)}>\n                                    <span>{sub.id}</span>\n                                    <UserVideoComponent streamManager={sub} />\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n\n    /**\n     * --------------------------------------------\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n     * --------------------------------------------\n     * The methods below request the creation of a Session and a Token to\n     * your application server. This keeps your OpenVidu deployment secure.\n     *\n     * In this sample code, there is no user control at all. Anybody could\n     * access your application server endpoints! In a real production\n     * environment, your application server must identify the user to allow\n     * access to the endpoints.\n     *\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\n     * more about the integration of OpenVidu in your application server.\n     */\n    async getToken() {\n        const sessionId = await this.createSession(this.state.mySessionId);\n        return await this.createToken(sessionId);\n    }\n\n    async createSession(sessionId) {\n        const isSession = await axios.get(APPLICATION_SERVER_URL + 'openvidu/api/sessions', { customSessionId: sessionId }, {\n            headers: { 'Content-Type': 'application/json', 'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk=',},\n        });\n        console.log(\"isSession >> \")\n        console.log(isSession);\n        const response = await axios.post(APPLICATION_SERVER_URL + 'openvidu/api/sessions', { customSessionId: sessionId }, {\n            headers: { 'Content-Type': 'application/json', 'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk=',},\n        });\n        console.log(sessionId);\n        console.log(response.data);\n        return response.data; // The sessionId\n    }\n\n    async createToken(sessionId) {\n\tconsole.log(sessionId);\n        const response = await axios.post(APPLICATION_SERVER_URL + 'openvidu/api/sessions/' + sessionId.sessionId + '/connection', {}, {\n            headers: { 'Content-Type': 'application/json', 'Authorization': 'Basic T1BFTlZJRFVBUFA6c3NhZnk=', },\n        });\n\t    console.log(response.data);\n        return response.data.token; // The token\n    }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}